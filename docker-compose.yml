version: '3.7'

networks:
  database:
    driver: ${NETWORK_DRIVER}
  redis:
    driver: ${NETWORK_DRIVER}

volumes:
  covid-scraper:
    driver: ${VOLUME_DRIVER}
  database:
    driver: ${VOLUME_DRIVER}
  redis:
    driver: ${VOLUME_DRIVER}

services:
  covid-scraper:
    image: covid-scraper:latest
    build:
      context: ./applications/covid-scraper
      args:
        - RUBY_VERSION=${RUBY_VERSION}
    restart: always
    environment:
      - APP_ENV=${APP_ENV}
      - COVID_SCRAPER_CODE_PATH_CONTAINER=${COVID_SCRAPER_CODE_PATH_CONTAINER}
      - COVID_DATABASE_PATH_CONTAINER=${COVID_DATABASE_PATH_CONTAINER}
      - REDIS_URL=${REDIS_URL}
      - REDIS_PROVIDER=REDIS_URL
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    volumes:
      - covid-scraper:/usr/local/bundle
      - ${COVID_SCRAPER_CODE_PATH_HOST}:${COVID_SCRAPER_CODE_PATH_CONTAINER}
      - ${COVID_DATABASE_PATH_HOST}:${COVID_DATABASE_PATH_CONTAINER}
    networks:
      - database
      - redis
    ports:
      - '9292:9292'
    depends_on:
      - database
      - redis

  covid-stats:
    image: covid-stats:latest
    build:
      context: ./applications/covid-stats
      target: runtime
      args:
        - MAKEFLAGS=${BUILD_MAKEFLAGS}
        - BUILDKIT_INLINE_CACHE=1
    restart: "no"
    environment:
      - COVID_STATS_PATH_CONTAINER=${COVID_STATS_PATH_CONTAINER}
    volumes:
      - ${COVID_STATS_PATH_HOST}:${COVID_STATS_PATH_CONTAINER}
    deploy:
      labels:
        - "swarm.cronjob.enable=true"
        - "swarm.cronjob.schedule=0,30 1 * * *"
        - "swarm.cronjob.skip-running=true"
      replicas: 0
      restart_policy:
        condition: none

  swarm-cronjob:
    image: crazymax/swarm-cronjob
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - "TZ=Europe/Sofia"
      - "LOG_LEVEL=info"
      - "LOG_JSON=false"
    deploy:
      placement:
        constraints:
          - node.role == manager

  database:
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGGSSENCMODE: disable
    volumes:
      - database:/var/lib/postgresql/data
    networks:
      - database

  adminer:
    image: adminer
    restart: always
    networks:
      - database
    ports:
      - '8080:8080'
    depends_on:
      - database

  redis:
    image: redis:alpine
    restart: always
    volumes:
      - redis:/data
    networks:
      - redis
